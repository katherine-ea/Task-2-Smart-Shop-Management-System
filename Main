import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.time.LocalDate;
import java.util.Date;



//----MANAGE PRODUCTS PAGE----

//product class
class Product {
    private String prodName;
    private Double prodPrice;
    private int prodStockQty;

    public Product(String name, Double price, int stockQty) {
        this.prodName = name;
        this.prodPrice = price;
        this.prodStockQty = stockQty;
    }

    public String getName() {return prodName;}
    public Double getPrice() {return prodPrice;}
    public int getQty() {return prodStockQty;}

    //adds product attributes to string
    @Override
    public String toString() {
        return prodName + "," + prodPrice + "," + prodStockQty;
    }

    public static Product fromString(String productString) {
        String[] parts = productString.split(",");
        if (parts.length != 3) return null;
        try {
            String name = parts[0];
            Double price = Double.parseDouble(parts[1]);
            int qty = Integer.parseInt(parts[2]);
            return new Product(name, price, qty);
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return null;
        }
    }
}

//products manager
class ProductsManager {
    private ArrayList<Product> products;
    private static final String FILE_NAME = "products.txt";

    public ProductsManager() {
        this.products = new ArrayList<>();
        loadProducts();
    }

    public void addProduct(Product product) {
        products.add(product);
        saveProducts();
    }

    public void deleteProduct(int index) {
        if (index >= 0 && index < products.size()) {
            products.remove(index);
            saveProducts();
        }
    }

    public ArrayList<Product> getProducts() {
        return products;
    }

    private void saveProducts() {
        try (PrintWriter writer = new PrintWriter(new FileWriter(FILE_NAME))) {
            for (Product product : products) {
                writer.println(product.toString());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadProducts() {
        products.clear();
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Product product = Product.fromString(line);
                if (product != null) {
                    products.add(product);
                }
            }
        }
        catch (IOException e) {
            products = new ArrayList<>();
        }
    }
}

//GUI
public class Main {
    private ProductsManager smartShop;
    private JFrame frame;
    private JTable productsTable;
    private DefaultTableModel tableModel;

    public Main() {
        smartShop = new ProductsManager();
        shopGUI();
    }

    private void shopGUI() {
        frame = new JFrame("Smart Shop");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 500);

        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(0, 200, 0, 20));

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.Y_AXIS));
        inputPanel.setBorder(BorderFactory.createTitledBorder("Add New Product"));

        JPanel row1 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel nameLabel = new JLabel("Name:");
        JTextField nameField = new JTextField(10);
        row1.add(nameLabel);
        row1.add(nameField);

        JPanel row2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel priceLabel = new JLabel("Price:");
        JTextField priceField = new JTextField(8);
        row2.add(priceLabel);
        row2.add(priceField);

        JPanel row3 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel qtyLabel = new JLabel("Qty:");
        JTextField qtyField = new JTextField(5);
        row3.add(qtyLabel);
        row3.add(qtyField);

        JPanel row4 = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JButton addButton = new JButton("Add Product");
        row4.add(addButton);

        JPanel row5 = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JButton deleteButton = new JButton("Delete Selected Product");
        row5.add(deleteButton);

        inputPanel.add(row1);
        inputPanel.add(row2);
        inputPanel.add(row3);
        inputPanel.add(row4);
        inputPanel.add(row5);

        tableModel = new DefaultTableModel(new String[]{"Name", "Price", "Quantity"}, 0);
        productsTable = new JTable(tableModel);
        refreshProductList();

        JScrollPane tableScrollPane = new JScrollPane(productsTable);
        tableScrollPane.setBorder(BorderFactory.createTitledBorder("Product List"));

        JPanel rightPanel = new JPanel();
        rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));
        rightPanel.add(inputPanel);
        rightPanel.add(Box.createVerticalStrut(10));
        rightPanel.add(tableScrollPane);

        mainPanel.add(rightPanel, BorderLayout.CENTER);
        frame.getContentPane().add(mainPanel);
        frame.setResizable(false);
        frame.setVisible(true);

        addButton.addActionListener(e -> {
            String name = nameField.getText().trim();
            String price = priceField.getText().trim();
            String qty = qtyField.getText().trim();

            if (name.isEmpty() || price.isEmpty() || qty.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "All fields must be filled!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                double priceVal = Double.parseDouble(price);
                int qtyVal = Integer.parseInt(qty);
                smartShop.addProduct(new Product(name, priceVal, qtyVal));
                refreshProductList();
                nameField.setText(""); priceField.setText(""); qtyField.setText("");
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(frame, "Price and Quantity must be numbers!", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        deleteButton.addActionListener(e -> {
            int selectedRow = productsTable.getSelectedRow();
            if (selectedRow != -1) {
                smartShop.deleteProduct(selectedRow);
                refreshProductList();
            }
        });
    }

    private void refreshProductList() {
        tableModel.setRowCount(0);
        for (Product product : smartShop.getProducts()) {
            tableModel.addRow(new Object[]{product.getName(), product.getPrice(), product.getQty()});
        }
    }

//----END OF MANAGE PRODUCTS PAGE----


class Sales {
	public static ArrayList<String> name;
  	public static Date date;
	public static int qty;
	public static Double price;
	public static ArrayList<String> products = new ArrayList<String>();
	public static ArrayList<Double> prices = new ArrayList<Double>();
	static ArrayList<Integer> qtyTotal = new ArrayList<Integer>();
		
	public Sales(ArrayList<String> name, Date date, int qty, Double price) {
		this.name = name;
		this.date = date;
		this.qty = qty;
		this.price = price;
	}
	public void recordSales(){
		public static ArrayList<String> name;
		public static Date date;
		public static int qty;
		public static Double price;
		//products available
		public static ArrayList<String> products = new ArrayList<String>();
		//individual prices for each product
		public static ArrayList<Double> prices = new ArrayList<Double>();
		//total quantity
		static ArrayList<Integer> qtyTotal = new ArrayList<Integer>();
		//dates of purchases
		static ArrayList<LocalDate> allDates = new ArrayList<LocalDate>();
		//products that have a sale
		static ArrayList<String> productsBought = new ArrayList<String>();
		//total purchase amount for a sale
		static ArrayList<Double> totalPurchases = new ArrayList<Double>();
		public RecordSale(ArrayList<String> name, Date date, int qty, Double price) {
			this.name = name;
			this.date = date;
			this.qty = qty;
			this.price = price;
		}

		
		//public static void main() {
		JFrame frame = new JFrame();
		
		JPanel panel = new JPanel(new GridLayout(1, 4));
		frame.setSize(600, 300);
	    	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    	frame.setVisible(true);
	    	frame.setTitle("Shop");
		frame.setLayout(new FlowLayout());
		
		JLabel nameLabel = new JLabel("Product Name:");
		JLabel dateLabel = new JLabel("Date:");
		JLabel qtyLabel = new JLabel("Qty:");
		JLabel priceLabel = new JLabel("Price:  £");
		JLabel totalPriceLabel = new JLabel("Total Price:  £");
		
		//examples of products to test the code
		products.add("Jam");
		products.add("Hot chocolate");
		prices.add(12.50);
		prices.add(2.00);
		qtyTotal.add(4);
		qtyTotal.add(12);
		
		//products made from the 'add products' page
		String[] array = products.toArray(new String[products.size()]);
		
		//components
        	JComboBox<String> productsCombo = new JComboBox<>(array);
		LocalDate todaysDate = LocalDate.now();
		JTextField dateField = new JTextField(10);
		dateField.setText("" + todaysDate);
		JTextField qtyField = new JTextField(10);
		JTextField priceField = new JTextField(10);
		JButton addSale = new JButton("Add Sale");
		productsCombo.addActionListener(e -> priceField.setText("" + prices.get(productsCombo.getSelectedIndex())));
		JButton addPrice = new JButton("Total Price");
		JTextField totalPrice = new JTextField(10);
		
		String quantityProduct = qtyField.getText();
		
		//add components to JFrame
		frame.add(panel);
		panel.add(nameLabel);
		panel.add(productsCombo);
		frame.add(dateLabel);
		frame.add(dateField);
		frame.add(qtyLabel);
		frame.add(qtyField);
		frame.add(priceLabel);
		frame.add(priceField);
		frame.add(totalPriceLabel);
		frame.add(totalPrice);
		frame.add(addPrice);
		frame.add(addSale);
		
		//add functionality to the 'add sales' button
		addSale.addActionListener(e -> {
			
			try {
				System.out.println(qtyTotal);
				//get input of what product is picked
		    		String pName = (String) productsCombo.getSelectedItem();
		    		//get index of the product that is sold
		    		int productIndex = products.indexOf(pName);
		    		//get the same index for the quantity
		    		try {
			    		int qtyEntered = Integer.parseInt(qtyField.getText());
			    		if (qtyEntered > qtyTotal.get(productIndex)) {
			    			//alerts user if the qty they ordered is higher than the available stock
			    			JOptionPane.showMessageDialog(null, ("Not enough stock. The remaining stock for this item is " + qtyTotal.get(productIndex) + "."));
			    		
			    			JOptionPane.showMessageDialog(null, ("Please enter a different quantity."));
			    		} 
					//prevent negative quantities
					else if (qtyEntered<=0) {
			    			JOptionPane.showMessageDialog(null, ("The quantity must be more than 0."));
			    		}
			    		else {
			    			int x = qtyTotal.get(productIndex);
				    		//remove that quantity
				    		qtyTotal.remove(productIndex);
				    		int pQty = Integer.parseInt(qtyField.getText());
				    		//take away the quantity being bought from the original quantity
				    		qtyTotal.add(productIndex,(x - pQty));
						JOptionPane.showMessageDialog(null, ("Sale added!"));
			    		}
		    		}	 
		    		catch (NumberFormatException ee) {
					JOptionPane.showMessageDialog(null, ("Please enter a number for the quantity."));
		    		}
	
		    		System.out.println(qtyTotal);
		    		Double overallPrice = prices.get(productsCombo.getSelectedIndex())*Double.parseDouble(qtyField.getText());
		    		allDates.add(todaysDate);
		    		productsBought.add(pName);
		    		totalPurchases.add(overallPrice);
			}
			catch (Exception ee) {
				JOptionPane.showMessageDialog(null, ("An error occured. Please try again."));
			}
	    	
		    	
	    });
		
		addPrice.addActionListener(e-> {
			String pName = (String) productsCombo.getSelectedItem();
	    		//get index of the product that is sold
	    		int productIndex = products.indexOf(pName);
			try {
		    		int qtyEntered = Integer.parseInt(qtyField.getText());
		    		totalPrice.setText("" + prices.get(productsCombo.getSelectedIndex())*Double.parseDouble(qtyField.getText()));
		    		if (qtyEntered > qtyTotal.get(productIndex)) {
		    			//alerts user if the qty they ordered is higher than the available stock
		    			JOptionPane.showMessageDialog(null, ("Not enough stock. The remaining stock for this item is " + qtyTotal.get(productIndex) + "."));
		    			JOptionPane.showMessageDialog(null, ("Please enter a different quantity."));
		    		}
					//prevent negative quantities
				else if (qtyEntered<=0) {
			    		JOptionPane.showMessageDialog(null, ("The quantity must be more than 0."));
			    	}		    	
	    		} catch (NumberFormatException ee) {
				JOptionPane.showMessageDialog(null, ("Please enter a number for the quantity."));
	    		}
				
			
		});
		
}}
	public void inventory() {
		//arraylists for testing the table
		static ArrayList<Integer> qtyTotal = new ArrayList<Integer>();
		static ArrayList<LocalDate> allDates = new ArrayList<LocalDate>();
		static ArrayList<String> productsBought = new ArrayList<String>();
		static ArrayList<Double> totalPurchases = new ArrayList<Double>();
	
	    	//public static void main(String[] args) {
	    	
	        JFrame frame = new JFrame("JTable Example");
	        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	        //making the column headers
	        String col[] = {"Product Name", "Total Price", "Qty", "Date"};
	        DefaultTableModel tableModel = new DefaultTableModel(col, 0);
	        JTable table = new JTable(tableModel);
	      
	        //data for testing
	        productsBought.add("butter");
	        productsBought.add("jam");
	        totalPurchases.add(2.50);
	        totalPurchases.add(6.00);
	        qtyTotal.add(3);
	        qtyTotal.add(88);
	        allDates.add(LocalDate.now());
	        allDates.add(LocalDate.now());
	        productsBought.add("Hot chocolate");
	        totalPurchases.add(8.00);
	        qtyTotal.add(4);
	        allDates.add(LocalDate.now());
	        
	        //adding rows to the table for each product bought
        	for (int i = 0; i < productsBought.size(); i++){
        		   String productName = productsBought.get(i);
        		   Double priceProduct = totalPurchases.get(i);
        		   int qtyProducts = qtyTotal.get(i);
        		   LocalDate todaysDate = allDates.get(i);
        		   Object[] data = {productName, priceProduct, qtyProducts, todaysDate};
        		   tableModel.addRow(data);
        		   //warning for low stock
        		   if (qtyProducts<5) {
        			   JOptionPane.showMessageDialog(null, ("Warning! Less than 5 " + productName + " left!"));
        		   }
        	}
        	
        	//change colour of row depending on stock levels
        	table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
           	    @Override
           	    public Component getTableCellRendererComponent(JTable table,
           	            Object value, boolean isSelected, boolean hasFocus, int row, int col) {

           	        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
           	        //get row of data depending on column data
           	        int status = (Integer)table.getModel().getValueAt(row, QTY_COL);
           	        
           	        	
	           	        if (status<5) {
	           	        	//if urgently needs more stock
	           	            setBackground(Color.decode("#B30000"));
	           	            setForeground(Color.WHITE);
	           	        //if maybe needs more stock
	           	        } else if (status<10 && status>5){
	           	        	setBackground(Color.decode("#FFAE00"));
	           	            setForeground(Color.BLACK);
	           	        //if a good amount of stock
	           	        }else {
	           	            setBackground(Color.decode("#00FF11"));
	           	            setForeground(Color.BLACK);
	           	        }       
	           	        return this;
           	    }
           	});

	  
	        JScrollPane scrollPane = new JScrollPane(table);
	        frame.add(scrollPane);
	        //disables editing
	        table.setEnabled(false);
	        frame.setSize(400, 300);
	        frame.setVisible(true);
    }}
}

class ProductsManager {
  ArrayList<product> products;
  String FILE_NAME = "products.txt";

  public void updateStock() {
    
}

public void lowStockLevels() {
}
}

public class Main {
  //private productsManager smartShop;
  private JFrame frame;
  private JTable productsTable;
  private DefaultTableModel tableModel;

  public Main() {
    //smartShop = new productManager();
    //shopGUI();
  }





  public static void main(String[] args) {
    SwingUtilities.invokeLater(Main::new);
  }
}
